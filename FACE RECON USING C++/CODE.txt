#include "opencv2/objdetect.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/features2d.hpp"
#include "opencv2/core/types_c.h" 
#include <iostream>
#include <opencv2\opencv.hpp>
#include <opencv2\dnn.hpp>
#include <opencv2\dnn\shape_utils.hpp>
#include <opencv2\highgui\highgui_c.h>

using namespace cv;
using namespace cv::dnn;
using namespace std;
const size_t inWidth = 300;
const size_t inHeight = 300;
const double inScaleFactor = 1.0;
const Scalar meanVal(104.0, 177.0, 123.0);


class img_detect {
public:
    void detectAndDraw(Mat& img, CascadeClassifier& cascade, double scale) {
        vector<Rect> faces;
        Mat gray;
        cvtColor(img, gray, COLOR_BGR2GRAY);
        cascade.detectMultiScale(gray, faces, 1.1, 2, 0);
        for (size_t i = 0; i < faces.size(); i++)
        {
            Rect r = faces[i];
            Scalar color = Scalar(255, 0, 0);
            rectangle(img, cvPoint(cvRound(r.x * scale), cvRound(r.y * scale)), cvPoint(cvRound((r.x +
                r.width - 1) * scale), cvRound((r.y + r.height - 1) * scale)), color, 3, 8, 0);
        }
        imshow("Face Detection", img);
        cv::waitKey(500000);

    }
    void main_img_det()
    {
        CascadeClassifier cascade;
        cascade.load("C:\\Users\\Computer Xpertz\\Downloads\\Programs\\opencv\\sources\\data\\haarcascades\\haarcascade_frontalcatface.xml");
        double scale = 1;
        Mat frame = imread("C:\\Users\\Computer Xpertz\\Desktop\\IMG\\pp.jpg", IMREAD_COLOR);
        detectAndDraw(frame, cascade, scale);
    }

};


class live_img_detect {
public:
    void main_live_detect()
    {
        float min_confidence = 0.5;
        String modelConfiguration = "C:\\Users\\Computer Xpertz\\Downloads\\Programs\\opencv\\sources\\samples\\dnn\\face_detector\\deploy.prototxt";
        String modelBinary = "C:\\Users\\Computer Xpertz\\Downloads\\Programs\\opencv\\sources\\samples\\dnn\\face_detector\\res10_300x300_ssd_iter_140000.caffemodel";
        //! [Initialize network]  
        dnn::Net net = readNetFromCaffe(modelConfiguration, modelBinary);
        //! [Initialize network]  
        if (net.empty())
        {
            cerr << "Can't load network by using the following files: " << endl;
            cerr << "prototxt:   " << modelConfiguration << endl;
            cerr << "caffemodel: " << modelBinary << endl;
            cerr << "Models are available here:" << endl;
            cerr << "<OPENCV_SRC_DIR>/samples/dnn/face_detector" << endl;
            cerr << "or here:" << endl;
            cerr << "https://github.com/opencv/opencv/tree/master/samples/dnn/face_detector" << endl;
            exit(-1);
        }

        VideoCapture cap(0);
        if (!cap.isOpened())
        {
            cout << "Couldn't open camera : " << endl;
        }
        for (;;)
        {
            Mat frame;
            cap >> frame; // get a new frame from camera/video or read image  

            if (frame.empty())
            {
                waitKey();
                break;
            }

            if (frame.channels() == 4)
                cvtColor(frame, frame, COLOR_BGRA2BGR);

            //! [Prepare blob]  
            Mat inputBlob = blobFromImage(frame, inScaleFactor,  //BINARY LARGE OBJECT 
                Size(inWidth, inHeight), meanVal, false, false); //Convert Mat to batch of images  
                                                                //! [Prepare blob]  

                                                                 //! [Set input blob]  
            net.setInput(inputBlob, "data"); //set the network input  
                                             //! [Set input blob]  

                                             //! [Make forward pass]  
            Mat detection = net.forward("detection_out"); //compute output  
                                                          //! [Make forward pass]  

            vector<double> layersTimings;
            double freq = getTickFrequency() / 1000;
            double time = net.getPerfProfile(layersTimings) / freq;

            Mat detectionMat(detection.size[2], detection.size[3], CV_32F, detection.ptr<float>());

            ostringstream ss;
            ss << "FPS: " << 1000 / time << " ; time: " << time << " ms";
            putText(frame, ss.str(), Point(20, 20), 0, 0.5, Scalar(0, 0, 255));

            float confidenceThreshold = min_confidence;
            for (int i = 0; i < detectionMat.rows; i++)
            {
                float confidence = detectionMat.at<float>(i, 2);

                if (confidence > confidenceThreshold)
                {
                    int xLeftBottom = static_cast<int>(detectionMat.at<float>(i, 3) * frame.cols);
                    int yLeftBottom = static_cast<int>(detectionMat.at<float>(i, 4) * frame.rows);
                    int xRightTop = static_cast<int>(detectionMat.at<float>(i, 5) * frame.cols);
                    int yRightTop = static_cast<int>(detectionMat.at<float>(i, 6) * frame.rows);

                    Rect object((int)xLeftBottom, (int)yLeftBottom,
                        (int)(xRightTop - xLeftBottom),
                        (int)(yRightTop - yLeftBottom));

                    rectangle(frame, object, Scalar(0, 255, 0));

                    ss.str("");
                    ss << confidence;
                    String conf(ss.str());
                    String label = "Face: " + conf;
                    int baseLine = 0;
                    Size labelSize = getTextSize(label, FONT_HERSHEY_SIMPLEX, 0.5, 1, &baseLine);
                    rectangle(frame, Rect(Point(xLeftBottom, yLeftBottom - labelSize.height),
                        Size(labelSize.width, labelSize.height + baseLine)),
                        Scalar(255, 255, 255), cv::FILLED);
                    putText(frame, label, Point(xLeftBottom, yLeftBottom),
                        FONT_HERSHEY_SIMPLEX, 0.5, Scalar(0, 0, 0));
                }
            }
            cv::imshow("detections", frame);
            if (waitKey(1) >= 0) break;
        }
    }
};


int main() {
    img_detect obj1;
    live_img_detect obj2; 
    again:
    char choice;
    cout << "\n\t\t<--------FACE DETECTION---------->";
    cout << "\n\nPLEASE CHOOSE FROM THE FOLLOWING -->\n1) Face Detection on an image\n2) Real Time Face Detection\n3) Exit";
    cout << "\nEnter Your Choice (1/2) -: "; cin >> choice;
    if (choice == '1') {
        obj1.main_img_det();
    }
    else if (choice == '2') {
        obj2.main_live_detect();
    }
    else if (choice == '3') {
        goto end;
    }
    else {
        cout << "\n\n Invalid Choice.... Try again....\n"; goto again;
    }
    end:
    return 0;
}